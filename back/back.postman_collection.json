{
	"info": {
		"_postman_id": "d6dc6753-a352-4707-8ae3-34d5208d5df7",
		"name": "back",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25503374",
		"_collection_link": "https://projetwebulep.postman.co/workspace/projet_web_m1~7a9422fd-2ca0-48b4-afc1-abd96398de8e/collection/26992099-d6dc6753-a352-4707-8ae3-34d5208d5df7?action=share&source=collection_link&creator=25503374"
	},
	"item": [
		{
			"name": "health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/health",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n    createUser(username: \"paul_dupont\") {\r\n        id\r\n        username\r\n    }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "fetch users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Users - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Users - Response should be an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.users).to.be.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\r\n  users {\r\n    id\r\n    username\r\n  }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "create conversation",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n    createConversation(user1Id: \"244879aa-3c35-4fba-b8fe-e64094d511b1\", user2Id: \"b667533b-9bdb-43ce-a46e-ec4b8d2a82e3\") {\r\n        id\r\n        name\r\n        user1 {\r\n            id\r\n            username\r\n        }\r\n        user2 {\r\n            id\r\n            username\r\n        }\r\n    }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "fetch user conversation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get User Conversations - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get User Conversations - Response should be an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.conversationsByUser).to.be.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n    conversationsByUser(userId: \"2bba11ff-e572-4d3f-9aa7-8cb5ce2dc012\") {\r\n        id\r\n        name\r\n        user1 {\r\n            id\r\n            username\r\n        }\r\n        user2 {\r\n            id\r\n            username\r\n        }\r\n    }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "send message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Send Message - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n    sendMessage(conversationId: \"94a697c1-bf37-4e28-aadd-fb51d6e86386\", userId: \"14ff488d-3df8-4fa1-87e0-9ac320bcaf51\", text: \"Merci t'es trop sucrÃ©\") {\r\n        id\r\n        user {\r\n            id\r\n            username\r\n        }\r\n        text\r\n        creationDate\r\n    }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "fetch message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.property('messagesByConversation');\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain an array of messages\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.messagesByConversation).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each message should have required properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.data.messagesByConversation.forEach(message => {\r",
							"        pm.expect(message).to.have.property('id');\r",
							"        pm.expect(message).to.have.property('text');\r",
							"        pm.expect(message).to.have.property('creationDate');\r",
							"        pm.expect(message).to.have.property('user');\r",
							"        pm.expect(message.user).to.have.property('id');\r",
							"        pm.expect(message.user).to.have.property('username');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n    messagesByConversation(conversationId: \"94a697c1-bf37-4e28-aadd-fb51d6e86386\") {\r\n        id\r\n        text\r\n        creationDate\r\n        user {\r\n            id\r\n            username\r\n        }\r\n    }\r\n}\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	]
}